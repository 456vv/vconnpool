var DefaultReadBufSize int = 4096                                               // 默认读取时的缓冲区大小（单位字节）
type Dialer interface {                                                 // net.Dialer 接口
    Dial(network, address string) (net.Conn, error)                             // 拨号
}
type Conn interface{                                                    // 连接接口
    net.Conn                                                                    // net连接接口
    Discard() error                                                             // 废弃（这条连接不再回收）
}
type connAddr struct {                                                  // 连接地址
    network, address string                                                     // 类型，地址
}
type connSingle struct {                                                // 单连接
    net.Conn                                                                    // 连接
    cs          *connStorage                                                    // 连接存储
    cp          *ConnPool                                                       // 池
    key         connAddr                                                        // 连接地址
    err         error                                                           // 错误
    count       int64                                                           // 计数，判断还有没有数据正在读写
    poolsrc     bool                                                            // 连接来源，判断连接是不是从池里读出来的
    once        sync.Once                                                       // 一次调用，如果从池里读出的连接是已经被远程关闭的。则新创建一条连接
    done        bool                                                            // 判断本次读取是否完成
    closed      bool                                                            // 连接关闭了
    discard     bool                                                            // 废弃（这条连接不再回收）
}
    func newConnStorage(conn net.Conn) *connStorage                             // 快速生成连接存储
    func (cs *connSingle) Write(b []byte) (n int, err error)                    // 写入
    func (cs *connSingle) Read(b []byte) (n int, err error)                     // 读取
    func (cs *connSingle) Close() error                                         // 关闭连接
    func (cs *connSingle) LocalAddr() net.Addr                                  // 返回本地网络地址
    func (cs *connSingle) RemoteAddr() net.Addr                                 // 返回远端网络地址
    func (cs *connSingle) SetDeadline(t time.Time) error                        // 设置读写超时时间
    func (cs *connSingle) SetReadDeadline(t time.Time) error                    // 设置读取超时时间
    func (cs *connSingle) SetWriteDeadline(t time.Time) error                   // 设置写入超时时间
    func (cs *connSingle) Discard() error                                        // 废弃（这条连接不再回收）
type connStorage struct{                                                // 连接存储
    conn    net.Conn                                                            // 实时连接
    bufr    *bufio.Reader                                                       // 缓冲读取
    bufw    *bufio.Writer                                                       // 缓冲写入，要记得写入之后调用 .Flush()
    use     bool                                                                // 为true,正在使用这个连接
    closed  bool                                                                // 连接已经关闭
}
    func (cs *connStorage) loopReadUnknownData()                                // 连接收回收，并检测有没有不请自来的数据。
    func (cs *connStorage) Close() error                                        // 连接关闭
type ConnPool struct {                                                  // 连接池
    net.Dialer                                                                  // 拨号
    IdeConn     int                                                             // 空闲连接数，0为不复用连接
    MaxConn     int                                                             // 最大连接数，0为无限制连接
    connNum     int                                                             // 当前连接数
    conns       map[connAddr]chan *connStorage                                  // 连接集
    m           *sync.Mutex                                                     // 锁
    closed      bool                                                            // 关闭池
    inited      bool                                                            // 初始化
}
    func (cp *ConnPool) init()                                                  // 初始化
    func (cp *ConnPool) getConns(key connAddr) chan *connStorage                // 读取池连接
    func (cp *ConnPool) Dial(network, address string) (net.Conn, error)         // 拨号,如果 address 参数是host域名，.Get(...)将无法读取到连接。请再次使用 .Dial(...) 来读取。
    func (cp *ConnPool) getConn(key connAddr, dial bool) (connStore *connStorage, conn net.Conn, pool bool, err error) // 读取连接
    func (cp *ConnPool) Put(conn net.Conn) error                                // 增加连接
    func (cp *ConnPool) Get(add net.Addr) (net.Conn, error)                     // 读取连接，读取出来的连接不会自动回收，需要调用 .Put(...) 收入
    func (cp *ConnPool) ConnNum() int                                           // 当前连接数量
    func (cp *ConnPool) ConnNumIde(network, address string) int                 // 当前连接数量(空闲)
    func (cp *ConnPool) put(conn net.Conn, key connAddr) error                  // 回收连接
    func (cp *ConnPool) CloseIdleConnections()                                  // 关闭空闲连接
    func (cp *ConnPool) Close() error                                           // 关闭连接池
